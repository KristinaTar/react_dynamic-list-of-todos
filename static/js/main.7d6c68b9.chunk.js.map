{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["baseUrl","TodoList","props","todos","randomize","setSelectedUserId","useState","searchTitle","setSearchTitle","selectOption","setSelectOption","filtredTodos","filter","todo","title","toLowerCase","includes","completed","className","type","value","onChange","event","target","htmlFor","onClick","length","map","e","preventDefault","checked","readOnly","userId","id","CurrentUser","clearUser","currentUserData","setCurrentUserData","useEffect","fetch","then","response","json","getUsers","res","name","email","phone","App","selectedUserId","setTodos","useCallback","randomizedArr","sort","Math","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d6c68b9.chunk.js","sourcesContent":["const baseUrl = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${baseUrl}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (userId:number) => {\n  return fetch(`${baseUrl}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React, { useState } from 'react';\nimport './TodoList.scss';\nimport '../../api';\n\ntype Props = {\n  todos: Todo[];\n  randomize: () => void;\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, randomize, setSelectedUserId } = props;\n  const [searchTitle, setSearchTitle] = useState('');\n  const [selectOption, setSelectOption] = useState('all');\n\n  const searchHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTitle(event.target.value);\n  };\n\n  const selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectOption(event.target.value);\n  };\n\n  const filtredTodos = todos.filter(\n    todo => todo.title.toLowerCase().includes(searchTitle.toLowerCase())\n      && (\n        selectOption === 'all'\n        || (selectOption === 'active' && todo.completed === false)\n        || (selectOption === 'completed' && todo.completed === true)\n      ),\n  );\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"TodoList__list-container\">\n        <input\n          className=\"TodoList__list-searchBar\"\n          type=\"text\"\n          value={searchTitle}\n          onChange={searchHandler}\n        />\n        <div className=\"TodoList__list-select__container\">\n          <label htmlFor=\"select_todo\">Choose a todo:</label>\n\n          <select className=\"TodoList__list-select\" onChange={selectHandler}>\n            <option value=\"all\">--Please choose an option--</option>\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n        </div>\n        <button\n          className=\"TodoList__list__randomize\"\n          type=\"button\"\n          onClick={() => {\n            randomize();\n          }}\n        >\n          Randomize\n        </button>\n        <ul className=\"TodoList__list\">\n          {filtredTodos.length === 0\n            ? 'No todos'\n            : filtredTodos.map(todo => (\n              <li\n                className={todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    onClick={e => e.preventDefault()}\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    setSelectedUserId(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [currentUserData, setCurrentUserData] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUsers(userId)\n      .then((res) => {\n        setCurrentUserData(res);\n      });\n  }, [userId]);\n\n  if (currentUserData !== null) {\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {userId}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{currentUserData.name}</h3>\n        <p className=\"CurrentUser__email\">{currentUserData.email}</p>\n        <p className=\"CurrentUser__phone\">{currentUserData.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <b>User not found</b>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos()\n      .then((res) => setTodos(res));\n  }, []);\n\n  const clearUser = useCallback(() => {\n    setSelectedUserId(0);\n  }, []);\n\n  const randomize = useCallback(() => {\n    const randomizedArr = todos.sort(\n      () => {\n        if (Math.random() > 0.5) {\n          return 1;\n        }\n\n        return -1;\n      },\n    );\n\n    setTodos([...randomizedArr]);\n  }, [todos]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          randomize={randomize}\n          setSelectedUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}